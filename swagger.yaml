openapi: 3.0.0
info:
  title: Ecommerce API
  description: Multi Vendor Ecommerce API
  contact: {}
  version: '1.0.0'
servers:
  - url: http://localhost:5000/api/v1
    description: Developpement Server
    variables: {}
  - url: http://localhost:5000/api/v1
    description: Live Server
    variables: {}
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user or seller
      description: |
        Creates a new user or seller account with the provided information.
        - First registered user becomes admin
        - Sends verification email
        - Requires terms acceptance
        - Different validation rules apply for user and seller accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserRegistration'
                - $ref: '#/components/schemas/SellerRegistration'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Success! Please check your email to verify account"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Please provide all values"
  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Log in user
      description: |
        Authenticates user and returns tokens
        - Requires verified email
        - Account must not be blocked
        - Role must match login portal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - role
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [user, seller]
                password:
                  type: string
                rememberMe:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      firstname:
                        type: string
                      lastname:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              schema:
                type: string
                description: HTTP-only refresh token cookie
        '400':
          description: Invalid credentials
        '401':
          description: Account not verified
        '403':
          description: Account blocked or wrong role

  /auth/refresh-token:
    get:
      tags:
        - Auth
      summary: Refresh access token
      description: Uses refresh token cookie to issue new access token
      responses:
        '200':
          description: New tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    type: object
        '401':
          description: Invalid or expired refresh token

  /auth/verify-email/{token}:
    get:
      tags:
        - Auth
      summary: Verify email address
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired token

  /auth/resend-verification-email:
    post:
      tags:
        - Auth
      summary: Resend verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: Verification email sent
        '400':
          description: Account already verified
        '404':
          description: User not found

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: |
        Sends password reset email to verified accounts
        Reset token expires in 30 minutes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset email sent if account exists

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token

  /auth/change-password:
    put:
      tags:
        - Auth
      summary: Change password while logged in
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - password
              properties:
                currentPassword:
                  type: string
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid current password
        '401':
          description: Not authenticated

  /auth/logout:
    delete:
      tags:
        - Auth
      summary: Log out user
      security:
        - BearerAuth: []
      description: Removes refresh token and clears cookie
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Not authenticated

  /auth/google:
    get:
      tags:
        - Auth
      summary: Initiate Google OAuth
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, seller]
        - in: query
          name: redirect
          schema:
            type: string
      responses:
        '302':
          description: Redirects to Google login

  /auth/facebook:
    get:
      tags:
        - Auth
      summary: Initiate Facebook OAuth
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, seller]
        - in: query
          name: redirect
          schema:
            type: string
      responses:
        '302':
          description: Redirects to Facebook login

  /categories:
    get:
      tags:
        - Category
      summary: Get all categories
      description: |
        Retrieves a paginated list of all categories with optional filtering, sorting, and field selection.
        Supports text search across name and description fields.
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: |
            Search term to filter categories by name or description.
            Uses text index if enabled, otherwise performs regex search.
            Example: "Electronics"
        - in: query
          name: sort
          schema:
            type: string
          description: |
            Comma-separated list of fields to sort by. Use :desc for descending order.
            Example: "name:desc,createdAt"
          example: "name:desc"
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: | 
             Page number for pagination (default: 1)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
          description: |
            Number of items per page (default: 10, max: 50)
            example: 10
        - in: query
          name: select
          schema:
            type: string
          description: |
            Comma-separated list of fields to include in the response.
            Example: "name,description,image"
      responses:
        '200':
          description: Successfully retrieved categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    description: Number of items in current page
                    example: 10
                  total:
                    type: integer
                    description: Total number of items across all pages
                    example: 45
                  pages:
                    type: integer
                    description: Total number of pages
                    example: 5
                  currentPage:
                    type: integer
                    description: Current page number
                    example: 1
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid sort parameter"
    
    post:
      tags:
        - Category
      summary: Create a new category
      security:
        - BearerAuth: []
      description: |
        Admin only endpoint to create a new category.
        Requires multipart/form-data for image upload.
        Image will be uploaded to Cloudinary.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - image
              properties:
                name:
                  type: string
                  description: Unique name for the category
                  example: "Electronics"
                description:
                  type: string
                  description: Detailed description of the category
                  example: "Electronic devices and accessories"
                image:
                  type: string
                  format: binary
                  description: | 
                    Category image file (supported formats: jpg, jpeg, png)
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    $ref: '#/components/schemas/Category'
        '400':
          description: |
            Bad request - validation error
            Possible reasons:
            - Missing required fields
            - Category name already exists
            - Invalid image format
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "This category already exists"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /categories/{categoryId}/subcategories:
    post:
      tags:
        - Category
      summary: Add a subcategory to a category
      security:
        - BearerAuth: []
      description: |
        Admin only endpoint to add a new subcategory to an existing category.
        Subcategory names must be unique within the category.
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
          description: ID of the parent category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                  example: "Smartphones"
                  description: Unique name for the subcategory within the parent category
                description:
                  type: string
                  example: "Mobile phones and smartphones"
                  description: Detailed description of the subcategory
      responses:
        '201':
          description: Subcategory added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Subcategory added successfully"
                  category:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "This subcategory already exists"
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "No category found with id: 123"

 
  /jobs:
    post:
      tags:
        - Jobs
      summary: Create Job
      operationId: CreateJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
            example:
              company: google
              position: front-end developer
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    get:
      tags:
        - Jobs
      summary: Get All Jobs
      operationId: GetAllJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The job ID
    get:
      tags:
        - Jobs
      summary: Get Single Job
      operationId: GetSingleJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false

    patch:
      tags:
        - Jobs
      summary: Update Job
      operationId: UpdateJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJobRequest'
            example:
              company: random
              position: intern
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    delete:
      tags:
        - Jobs
      summary: Delete Job
      operationId: DeleteJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
components:
  schemas:
    UserRegistration:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
        - terms
        - role
      properties:
        firstname:
          type: string
          minLength: 3
          maxLength: 50
          example: "John"
          description: User's first name
        lastname:
          type: string
          minLength: 3
          maxLength: 50
          example: "Doe"
          description: User's last name
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: Must be unique and valid email format
        password:
          type: string
          minLength: 8
          example: "strongpassword123"
          description: Minimum 8 characters
        role:
          type: string
          enum: [user]
          example: "user"
          description: Must be 'user' for regular user registration
        terms:
          type: boolean
          example: true
          description: Must be true to accept terms and conditions

    SellerRegistration:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
        - mobile
        - role
        - storeName
        - storeDetails
        - terms
      properties:
        firstname:
          type: string
          minLength: 3
          maxLength: 50
          example: "Jane"
          description: Seller's first name
        lastname:
          type: string
          minLength: 3
          maxLength: 50
          example: "Smith"
          description: Seller's last name
        email:
          type: string
          format: email
          example: "jane.smith@store.com"
          description: Must be unique and valid email format
        password:
          type: string
          minLength: 8
          example: "strongpassword123"
          description: Minimum 8 characters
        mobile:
          type: string
          example: "+1234567890"
          description: Required for sellers, must be valid phone number with country code
        role:
          type: string
          enum: [seller]
          example: "seller"
          description: Must be 'seller' for seller registration
        storeName:
          type: string
          minLength: 3
          maxLength: 80
          example: "Jane's Electronics"
          description: Unique store name
        storeDetails:
          type: object
          required:
            - street
            - state
            - postalCode
            - country
          properties:
            street:
              type: string
              example: "123 Market Street"
              description: Store's street address
            state:
              type: string
              example: "California"
              description: Store's state/province
            city:
              type: string
              example: "San Francisco"
              description: Store's city
            postalCode:
              type: number
              example: 94105
              description: Store's postal/ZIP code
            country:
              type: string
              example: "United States"
              description: Store's country
        terms:
          type: boolean
          example: true
          description: Must be true to accept terms and conditions

    SubCategory:
      type: object
      required:
        - name
        - description
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
          description: Auto-generated subcategory ID
        name:
          type: string
          example: "Smartphones"
          description: Name of the subcategory (unique within parent category)
        description:
          type: string
          example: "Mobile phones and smartphones"
          description: Detailed description of the subcategory
        createdAt:
          type: string
          format: date-time
          example: "2024-02-02T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-02-02T12:00:00Z"

    Category:
      type: object
      required:
        - name
        - description
        - image
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
          description: Auto-generated category ID
        name:
          type: string
          example: "Electronics"
          description: Unique name of the category
        description:
          type: string
          example: "Electronic devices and accessories"
          description: Detailed description of the category
        image:
          type: object
          properties:
            public_id:
              type: string
              example: "categories/electronics-123"
              description: Cloudinary public ID for the image
            url:
              type: string
              format: uri
              example: "https://res.cloudinary.com/demo/image/upload/categories/electronics-123.jpg"
              description: Cloudinary secure URL for the image
        subcategories:
          type: array
          description: List of subcategories belonging to this category
          items:
            $ref: '#/components/schemas/SubCategory'
        createdAt:
          type: string
          format: date-time
          example: "2024-02-02T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-02-02T12:00:00Z"

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Authentication Invalid"

    Forbidden:
      description: User does not have required permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Not authorized to access this route" 
  
  securitySchemes:
    httpBearer:
      type: http
      scheme: bearer
security:
  - httpBearer: []
tags:
  - name: Auth
    description: ''
  - name: Cart
    description: ''
  - name: Category
    description: ''
  - name: User
    description: ''
  - name: Discount
    description: ''
  - name: Favourite
    description: ''
  - name: Order
    description: ''
  - name: Product
    description: ''
  - name: Review
    description: ''

