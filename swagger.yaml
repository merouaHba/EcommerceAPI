openapi: 3.0.0
info:
  title: Ecommerce API
  description: Multi Vendor Ecommerce API
  contact: {}
  version: '1.0.0'
servers:
  - url: http://localhost:5000/api/v1
    description: Developpement Server
    variables: {}
  - url: http://localhost:5000/api/v1
    description: Live Server
    variables: {}
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user or seller
      description: |
        Creates a new user or seller account with the provided information.
        - First registered user becomes admin
        - Sends verification email
        - Requires terms acceptance
        - Different validation rules apply for user and seller accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserRegistration'
                - $ref: '#/components/schemas/SellerRegistration'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Success! Please check your email to verify account"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Please provide all values"
  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Log in user
      description: |
        Authenticates user and returns tokens
        - Requires verified email
        - Account must not be blocked
        - Role must match login portal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - role
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [user, seller]
                password:
                  type: string
                rememberMe:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      firstname:
                        type: string
                      lastname:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              schema:
                type: string
                description: HTTP-only refresh token cookie
        '400':
          description: Invalid credentials
        '401':
          description: Account not verified
        '403':
          description: Account blocked or wrong role

  /auth/refresh-token:
    get:
      tags:
        - Auth
      summary: Refresh access token
      description: Uses refresh token cookie to issue new access token
      responses:
        '200':
          description: New tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    type: object
        '401':
          description: Invalid or expired refresh token

  /auth/verify-email/{token}:
    get:
      tags:
        - Auth
      summary: Verify email address
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired token

  /auth/resend-verification-email:
    post:
      tags:
        - Auth
      summary: Resend verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: Verification email sent
        '400':
          description: Account already verified
        '404':
          description: User not found

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: |
        Sends password reset email to verified accounts
        Reset token expires in 30 minutes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset email sent if account exists

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token

  /auth/change-password:
    put:
      tags:
        - Auth
      summary: Change password while logged in
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - password
              properties:
                currentPassword:
                  type: string
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid current password
        '401':
          description: Not authenticated

  /auth/logout:
    delete:
      tags:
        - Auth
      summary: Log out user
      security:
        - BearerAuth: []
      description: Removes refresh token and clears cookie
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Not authenticated

  /auth/google:
    get:
      tags:
        - Auth
      summary: Initiate Google OAuth
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, seller]
        - in: query
          name: redirect
          schema:
            type: string
      responses:
        '302':
          description: Redirects to Google login

  /auth/facebook:
    get:
      tags:
        - Auth
      summary: Initiate Facebook OAuth
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, seller]
        - in: query
          name: redirect
          schema:
            type: string
      responses:
        '302':
          description: Redirects to Facebook login

  /categories:
    get:
      tags:
        - Category
      summary: Get all categories with filtering, sorting, and pagination
      description: |
        Retrieves a paginated list of categories with powerful filtering and sorting capabilities.
        - Supports text search across name, description, and subcategory names
        - Includes virtual fields like productCount
        - Automatically populates active subcategories
        - Supports complex filtering operations
      parameters:
        - name: search
          in: query
          description: |
            Search term for full-text search across:
            - Category name
            - Category description
            - Subcategory names
            - Metadata fields
          schema:
            type: string
        - name: sort
          in: query
          description: |
            Comma-separated list of fields to sort by. Supported fields:
            - name
            - createdAt
            - updatedAt
            - displayOrder
            - featured
            - status
            - productCount
            
            Use :desc for descending order. Example: "name:desc,createdAt"
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: cursor
          in: query
          description: |
            Base64 encoded cursor for pagination.
            - Used for retrieving subsequent pages of results
            - Encoded value of the last item's `_id` from the previous request
            - Mutually exclusive with `page` and `limit` parameters
            - Supports forward pagination
            - Default encoding is base64
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Number of items to retrieve per page.
            - When using cursor pagination, defaults to 20
            - Maximum value is 50
            - Reduces the number of results returned
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: select
          in: query
          description: |
            Comma-separated list of fields to include. Available fields:
            - name
            - description
            - slug
            - image.url
            - parentCategory
            - displayOrder
            - featured
            - status
            - metadata
            - productCount
            - createdAt
            - updatedAt
            - subcategories
          schema:
            type: string
        - name: filter
          in: query
          description: |
            Complex filtering options:
            - name: [eq, ne, regex, in, nin]
            - slug: [eq, ne, in, nin]
            - status: [eq, ne, in]
            - featured: [eq]
            - displayOrder: [eq, gt, gte, lt, lte]
            - subcategories.name: [eq, ne, regex, in, nin]
            - parentCategory: [eq]
            - createdAt/updatedAt: [gt, gte, lt, lte, between]
            - productCount: [gt, gte, lt, lte]
            
            Example: status=active&featured=true&displayOrder[gte]=5
          schema:
            type: object
      responses:
        '200':
          description: Successfully retrieved categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                    description: Items in current page
                  total:
                    type: integer
                    description: Total items matching query
                  pages:
                    type: integer
                    description: Total pages
                  currentPage:
                    type: integer
                  nextCursor:
                    type: string
                    description: Base64 encoded cursor for the next page of results
                    nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

    post:
      tags:
        - Category
      summary: Create a new category or subcategory
      security:
        - BearerAuth: []
      description: |
        Admin-only endpoint to create a new category or subcategory.
        - Requires admin role
        - Handles image upload via multer
        - Creates parent category when parentCategory is not provided
        - Creates subcategory when parentCategory ID is provided
        - Validates unique category/subcategory names within their scope
        - Automatically generates SEO-friendly slugs
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - image
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  description: Name of the category/subcategory
                description:
                  type: string
                  minLength: 10
                  maxLength: 500
                  description: Detailed description
                image:
                  type: string
                  format: binary
                  description: Category/subcategory image file
                parentCategory:
                  type: string
                  format: uuid
                  description: Parent category ID. If not provided, creates a parent category
                displayOrder:
                  type: integer
                  default: 0
                  description: Display order within the same level
                featured:
                  type: boolean
                  default: false
                  description: Whether to feature this category
                status:
                  type: string
                  enum: [active, inactive]
                  default: active
                  description: Category status
                metadata:
                  type: object
                  additionalProperties:
                    type: string
                  description: Additional metadata key-value pairs
      responses:
        '201':
          description: Category/subcategory created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    oneOf:
                      - $ref: '#/components/schemas/Category'
                      - $ref: '#/components/schemas/CategoryWithParent'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/ValidationError'
                  - type: object
                    properties:
                      msg:
                        type: string
                        example: "This category/subcategory name already exists"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Parent category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Parent category not found"
  /categories/{id}:
    get:
      tags:
        - Category
      summary: Get detailed information about a specific category
      description: |
        Retrieves a single category with populated relationships:
        - Parent category information
        - Active subcategories (sorted by display order)
        - Virtual fields like product count
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved category
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    $ref: '#/components/schemas/Category'
                    description: Category with populated relationships
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "No category found with id: {id}"
  
  
    put:
      tags:
        - Category
      summary: Update category details
      security:
        - BearerAuth: []
      description: |
        Admin-only endpoint to update category information:
        - Validates unique name constraints
        - Auto-updates slug if name changes
        - Preserves existing image if not updated
        - Maintains relationships
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                description:
                  type: string
                  minLength: 10
                  maxLength: 500
                displayOrder:
                  type: integer
                featured:
                  type: boolean
                status:
                  type: string
                  enum: [active, inactive]
                metadata:
                  type: object
                  additionalProperties:
                    type: string
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Category updated successfully"
                  category:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "This category name already exists"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Category not found
  
  
    delete:
      tags:
        - Category
      summary: Delete a category
      security:
        - BearerAuth: []
      description: |
        Admin-only endpoint to delete a category:
        - Removes associated cloud storage images
        - Updates related products
        - Handles subcategory cleanup
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Category deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Category not found
  
  
  /categories/{id}/update-category-image:
    put:
      tags:
        - Category
      summary: Update category image
      security:
        - BearerAuth: []
      description: |
        Admin-only endpoint to update category image:
        - Automatically removes old image from cloud storage
        - Validates image format and size
        - Updates image URLs and public IDs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: New category image
      responses:
        '200':
          description: Image updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Image updated successfully"
                  category:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Invalid image format or upload failed
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Category not found or no file uploaded

  /products/:
    get:
      tags:
        - Product
      summary: Get all products
      description: Retrieve a paginated list of all products with filtering, sorting, and searching capabilities.
      parameters:
        - name: page
          in: query
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page.
          schema:
            type: integer
            default: 24
            maximum: 100
        - name: sort
          in: query
          description: Sorting criteria (e.g., `-createdAt` for descending order by creation date).
          schema:
            type: string
        - name: search
          in: query
          description: Search term for filtering products by name, description, or brand.
          schema:
            type: string
        - name: filter
          in: query
          description: Filter products by specific fields (e.g., `category`, `stockStatus`, `priceRange`).
          schema:
            type: object
      responses:
        '200':
          description: Successfully retrieved products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                    description: Number of products in the current page.
                  total:
                    type: integer
                    description: Total number of products matching the query.
                  pages:
                    type: integer
                    description: Total number of pages.
                  currentPage:
                    type: integer
                    description: Current page number.
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid filter parameters."

    post:
      tags:
        - Product
      summary: Create a new product
      description: Create a new product. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the product.
                basePrice:
                  type: number
                  description: Base price of the product.
                description:
                  type: string
                  description: Detailed description of the product.
                category:
                  type: string
                  description: ID of the product category.
                subcategory:
                  type: string
                  description: ID of the product subcategory.
                mainImage:
                  type: string
                  format: binary
                  description: Main image of the product.
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Additional images of the product.
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please provide all required fields."

  /products/search:
    get:
      tags:
        - Product
      summary: Search products
      description: Search for products by name, description, or brand.
      parameters:
        - name: query
          in: query
          required: true
          description: Search query.
          schema:
            type: string
      responses:
        '200':
          description: Search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid search query.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Search query is required."

  /products/category/{categoryId}:
    get:
      tags:
        - Product
      summary: Get products by category
      description: Retrieve products belonging to a specific category.
      parameters:
        - name: categoryId
          in: path
          required: true
          description: ID of the category.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Category not found."

  /products/{id}:
    get:
      tags:
        - Product
      summary: Get a single product
      description: Retrieve detailed information about a specific product by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found."

    put:
      tags:
        - Product
      summary: Update a product
      description: Update an existing product. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid product data."

    delete:
      tags:
        - Product
      summary: Delete a product
      description: Delete a product. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product deleted successfully."
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found."

  /products/{id}/main-image:
    put:
      tags:
        - Product
      summary: Update product main image
      description: Update the main image of a product. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: New main image file.
      responses:
        '200':
          description: Main image updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid image file.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid image file."

  /products/{id}/images:
    put:
      tags:
        - Product
      summary: Update product images
      description: Update all images of a product. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of new image files.
      responses:
        '200':
          description: Product images updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid image files.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid image files."

  /products/seller/dashboard:
    get:
      tags:
        - Product
      summary: Get seller dashboard stats
      description: Retrieve statistics for the seller's dashboard. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved dashboard stats.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    type: object
                    properties:
                      totalProducts:
                        type: integer
                      activeProducts:
                        type: integer
                      outOfStockProducts:
                        type: integer
                      lowStockProducts:
                        type: integer
                      draftProducts:
                        type: integer
                      totalSold:
                        type: integer
                      totalRevenue:
                        type: number
                      averageRating:
                        type: number
                      topSellingProducts:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      inventorySummary:
                        type: object
                        properties:
                          totalQuantity:
                            type: integer
                          totalReserved:
                            type: integer
                          totalBackorders:
                            type: integer
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access."

  
  /products/seller/{id}:
    get:
      tags:
        - Product
      summary: Get seller's products
      description: Retrieve products belonging to a specific seller. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: false
          description: ID of the seller. If not provided, uses the authenticated user's ID.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved seller's products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access."

  /products/{id}/status:
    put:
      tags:
        - Product
      summary: Update product status
      description: Update the status of a product. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [draft, active, inactive, deleted]
                  description: New status of the product.
      responses:
        '200':
          description: Product status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid status value."

  /products/{id}/inventory:
    put:
      tags:
        - Product
      summary: Update product inventory
      description: Update the inventory details of a product. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  description: Updated quantity of the product.
                lowStockThreshold:
                  type: number
                  description: Updated low stock threshold.
                allowBackorders:
                  type: boolean
                  description: Whether backorders are allowed.
                backorderLimit:
                  type: number
                  description: Updated backorder limit.
      responses:
        '200':
          description: Inventory updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid inventory data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid inventory data."

  /products/cheapest:
    get:
      tags:
        - Product
      summary: Get top cheapest products
      description: Retrieve the cheapest products.
      parameters:
        - name: limit
          in: query
          description: Number of products to retrieve.
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          description: Filter by category ID.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved cheapest products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid category ID."

  /products/featured:
    get:
      tags:
        - Product
      summary: Get featured products
      description: Retrieve featured products with high ratings and sales.
      responses:
        '200':
          description: Successfully retrieved featured products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid query parameters."

  /products/price-range:
    get:
      tags:
        - Product
      summary: Get products by price range
      description: Retrieve products within a specified price range.
      parameters:
        - name: minPrice
          in: query
          description: Minimum price.
          schema:
            type: number
        - name: maxPrice
          in: query
          description: Maximum price.
          schema:
            type: number
      responses:
        '200':
          description: Successfully retrieved products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid price range.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid price range."

  /products/recent:
    get:
      tags:
        - Product
      summary: Get recently added products
      description: Retrieve recently added products.
      parameters:
        - name: days
          in: query
          description: Number of days to look back.
          schema:
            type: integer
            default: 7
        - name: limit
          in: query
          description: Number of products to retrieve.
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successfully retrieved recent products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid query parameters."

  /products/stock-alert:
    get:
      tags:
        - Product
      summary: Get products stock alert
      description: Retrieve products with low stock or out-of-stock status for the seller. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved stock alert products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access."

  /products/bulk-update:
    put:
      tags:
        - Product
      summary: Bulk update products
      description: Update multiple products in bulk. Requires seller or admin authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                updates:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        description: ID of the product to update.
                      updateData:
                        type: object
                        description: Fields to update for the product.
      responses:
        '200':
          description: Products updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: string
                        success:
                          type: boolean
                        product:
                          $ref: '#/components/schemas/Product'
        '400':
          description: Invalid update data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid update data."

  /reviews:
    post:
      tags:
        - Review
      summary: Create a new product review
      description: |
        Allows authenticated users to create a review for a product
        - One review per user per product
        - Requires comment or rating
        - Authenticated user route
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
              properties:
                comment:
                  type: string
                  maxLength: 1000
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                productId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                  review:
                    $ref: '#/components/schemas/Review'
        '400':
          description: Validation error
        '404':
          description: Product not found

  /reviews/{id}:
    put:
      tags:
        - Review
      summary: Update an existing review
      description: |
        Allows user to update their own review
        - Can update comment or rating
        - User can only update their own reviews
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  maxLength: 1000
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                  review:
                    $ref: '#/components/schemas/Review'
        '400':
          description: Validation error
        '403':
          description: Not authorized to update this review
        '404':
          description: Review not found

    delete:
      tags:
        - Review
      summary: Delete a review
      description: |
        Allows user to delete their own review
        - User can only delete their own reviews
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '403':
          description: Not authorized to delete this review
        '404':
          description: Review not found

  /reviews/{productId}:
    get:
      tags:
        - Review
      summary: Get reviews for a specific product
      description: |
        Retrieves paginated reviews for a specific product
        - Supports sorting and pagination
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sort
          in: query
          schema:
            type: string
            default: '-createdAt'
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successfully retrieved reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  total:
                    type: integer
        '404':
          description: Product not found

  /reviews/stats/{productId}:
    get:
      tags:
        - Review
      summary: Get review statistics for a product
      description: |
        Retrieves aggregate review statistics including:
        - Average rating
        - Total number of reviews
        - Rating distribution
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved review statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    type: object
                    properties:
                      avgRating:
                        type: number
                      totalReviews:
                        type: integer
                      ratingDistribution:
                        type: array
        '404':
          description: No reviews found for product

  /reviews/my-reviews:
    get:
      tags:
        - Review
      summary: Get user's own reviews
      description: |
        Retrieves all reviews created by the authenticated user
        - Includes basic product information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'

  /reviews/user/{userId}:
    get:
      tags:
        - Review
      summary: Get reviews for a specific user
      description: |
        Retrieves reviews for a specific user
        - Seller can view reviews of their product reviews (userId not required)
        - Admin can view all user reviews
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved user reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '404':
          description: No reviews found for user
  
  /subscribe:
    post:
      tags:
        - Newsletter
      summary: Subscribe to newsletter
      description: |
        Adds an email address to the newsletter subscriber list
        - Requires valid email address
        - Utilizes MailChimp for subscriber management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Email address to subscribe
      responses:
        '201':
          description: Successfully subscribed to newsletter
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscriber added successfully"
        '400':
          description: Invalid email or subscription failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please Provide a valid email address"
components:
  schemas:
    UserRegistration:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
        - terms
        - role
      properties:
        firstname:
          type: string
          minLength: 3
          maxLength: 50
          example: "John"
          description: User's first name
        lastname:
          type: string
          minLength: 3
          maxLength: 50
          example: "Doe"
          description: User's last name
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: Must be unique and valid email format
        password:
          type: string
          minLength: 8
          example: "strongpassword123"
          description: Minimum 8 characters
        role:
          type: string
          enum: [user]
          example: "user"
          description: Must be 'user' for regular user registration
        terms:
          type: boolean
          example: true
          description: Must be true to accept terms and conditions

    SellerRegistration:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
        - mobile
        - role
        - storeName
        - storeDetails
        - terms
      properties:
        firstname:
          type: string
          minLength: 3
          maxLength: 50
          example: "Jane"
          description: Seller's first name
        lastname:
          type: string
          minLength: 3
          maxLength: 50
          example: "Smith"
          description: Seller's last name
        email:
          type: string
          format: email
          example: "jane.smith@store.com"
          description: Must be unique and valid email format
        password:
          type: string
          minLength: 8
          example: "strongpassword123"
          description: Minimum 8 characters
        mobile:
          type: string
          example: "+1234567890"
          description: Required for sellers, must be valid phone number with country code
        role:
          type: string
          enum: [seller]
          example: "seller"
          description: Must be 'seller' for seller registration
        storeName:
          type: string
          minLength: 3
          maxLength: 80
          example: "Jane's Electronics"
          description: Unique store name
        storeDetails:
          type: object
          required:
            - street
            - state
            - postalCode
            - country
          properties:
            street:
              type: string
              example: "123 Market Street"
              description: Store's street address
            state:
              type: string
              example: "California"
              description: Store's state/province
            city:
              type: string
              example: "San Francisco"
              description: Store's city
            postalCode:
              type: number
              example: 94105
              description: Store's postal/ZIP code
            country:
              type: string
              example: "United States"
              description: Store's country
        terms:
          type: boolean
          example: true
          description: Must be true to accept terms and conditions

    Category:
      type: object
      required:
        - name
        - description
        - image
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 50
        description:
          type: string
          minLength: 10
          maxLength: 500
        slug:
          type: string
          description: Auto-generated SEO-friendly URL slug
        image:
          type: object
          properties:
            url:
              type: string
              format: uri
        displayOrder:
          type: integer
          default: 0
        featured:
          type: boolean
          default: false
        status:
          type: string
          enum: [active, inactive]
          default: active
        metadata:
          type: object
          additionalProperties:
            type: string
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryWithParent'
          example:  # Add an example here
            - _id: "4fa85f64-5717-4562-b3fc-2c963f66afa7"
              name: "Smartphones"
              description: "Latest smartphones and accessories"
              slug: "smartphones"
              image:
                url: "https://example.com/images/smartphones.jpg"
              displayOrder: 1
              featured: true
              status: "active"
              metadata:
                key1: "value1"
                key2: "value2"
              parentCategory: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              createdAt: "2025-02-03T11:54:13.013Z"
              updatedAt: "2025-02-03T11:54:13.013Z"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CategoryWithParent:
      allOf:
        - $ref: '#/components/schemas/Category'
        - type: object
          required:
            - parentCategory
          properties:
            parentCategory:
              type: string
              format: uuid
              description: Reference to parent category
    
    
    Product:
      type: object
      properties:
        # Basic Product Information
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        brand:
          type: string

        # Pricing
        basePrice:
          type: number
        salePrice:
          type: number
        saleStartDate:
          type: string
          format: date
        saleEndDate:
          type: string
          format: date
        taxRate:
          type: number

        # Category and Seller
        category:
          type: string
        subcategory:
          type: string
        seller:
          type: string

        # Images
        mainImage:
          type: object
          properties:
            public_id:
              type: string
            url:
              type: string
        images:
          type: array
          items:
            type: object
            properties:
              public_id:
                type: string
              url:
                type: string

        # Inventory Management
        inventoryManagement:
          type: string
          enum: [simple, variation]
        quantity:
          type: number
        lowStockThreshold:
          type: number
        isOutOfStock:
          type: boolean
        isLowStock:
          type: boolean
        allowBackorders:
          type: boolean
        backorderLimit:
          type: number
        backorderCount:
          type: number
        reservedQuantity:
          type: number
        sold:
          type: number
        stockStatus:
          type: string
          enum: [in_stock, out_of_stock, low_stock, backorder]
        restockDate:
          type: string
          format: date

        # Product Variations
        attributes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              values:
                type: array
                items:
                  type: string
        variations:
          type: array
          items:
            type: object
            properties:
              attributes:
                type: object
                additionalProperties:
                  type: string
              sku:
                type: string
              price:
                type: number
              quantity:
                type: number
              images:
                type: array
                items:
                  type: object
                  properties:
                    public_id:
                      type: string
                    url:
                      type: string

        # Shipping Information
        shippingOptions:
          type: array
          items:
            type: object
            properties:
              method:
                type: string
                enum: [standard, express, overnight]
              price:
                type: number
              deliveryTime:
                type: object
                properties:
                  min:
                    type: number
                  max:
                    type: number
              applicableRegions:
                type: array
                items:
                  type: string
        shippingWeight:
          type: number
        dimensions:
          type: object
          properties:
            length:
              type: number
            width:
              type: number
            height:
              type: number
            unit:
              type: string
              enum: [cm, in]

        # Digital Product
        isDigital:
          type: boolean
        digitalDownloadInfo:
          type: object
          properties:
            downloadLink:
              type: string
            expiryDays:
              type: number

        # Product Status
        status:
          type: string
          enum: [draft, active, inactive, deleted]

        # Ratings
        ratingsAverage:
          type: number
        ratingsQuantity:
          type: number
        ratingDistribution:
          type: object
          properties:
            oneStar:
              type: number
            twoStars:
              type: number
            threeStars:
              type: number
            fourStars:
              type: number
            fiveStars:
              type: number

        # Metadata
        metadata:
          type: object
          additionalProperties:
            type: string

    ProductUpdate:
      type: object
      properties:
        # Basic Product Information
        name:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        brand:
          type: string

        # Pricing
        basePrice:
          type: number
        salePrice:
          type: number
        saleStartDate:
          type: string
          format: date
        saleEndDate:
          type: string
          format: date
        taxRate:
          type: number

        # Categorization
        category:
          type: string
        subcategory:
          type: string

        # Inventory Management
        quantity:
          type: number
        lowStockThreshold:
          type: number
        allowBackorders:
          type: boolean
        backorderLimit:
          type: number

        # Product Variations
        attributes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              values:
                type: array
                items:
                  type: string
        variations:
          type: array
          items:
            type: object
            properties:
              attributes:
                type: object
                additionalProperties:
                  type: string
              sku:
                type: string
              price:
                type: number
              quantity:
                type: number

        # Shipping
        shippingOptions:
          type: array
          items:
            type: object
            properties:
              method:
                type: string
                enum: [standard, express, overnight]
              price:
                type: number
              deliveryTime:
                type: object
                properties:
                  min:
                    type: number
                  max:
                    type: number
              applicableRegions:
                type: array
                items:
                  type: string
        shippingWeight:
          type: number
        dimensions:
          type: object
          properties:
            length:
              type: number
            width:
              type: number
            height:
              type: number
            unit:
              type: string
              enum: [cm, in]

        # Digital Product
        isDigital:
          type: boolean
        digitalDownloadInfo:
          type: object
          properties:
            downloadLink:
              type: string
            expiryDays:
              type: number

        # Product Status
        status:
          type: string
          enum: [draft, active, inactive, deleted]

        # Metadata
        metadata:
          type: object
          additionalProperties:
            type: string

    Review:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        review:
          type: string
          maxLength: 1000
        rating:
          type: number
          minimum: 1
          maximum: 5
        product:
          type: string
          format: uuid
        user:
          type: object
          properties:
            firstname:
              type: string
            lastname:
              type: string
            profilePicture:
              type: object
              properties:
                url:
                  type: string
        helpful:
          type: array
          items:
            type: string
            format: uuid
        reported:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Authentication Invalid"

    Forbidden:
      description: User does not have required permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Not authorized to access this route" 
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Please provide required fields"
    
    UploadError:
      description: Image upload failed
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Failed to upload image"

    DuplicateError:
      description: Unique constraint violation
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "This category already exists"
    
  securitySchemes:
    httpBearer:
      type: http
      scheme: bearer
security:
  - httpBearer: []
tags:
  - name: Auth
    description: ''
  - name: Cart
    description: ''
  - name: Category
    description: ''
  - name: User
    description: ''
  - name: Discount
    description: ''
  - name: Favourite
    description: ''
  - name: Order
    description: ''
  - name: Product
    description: ''
  - name: Review
    description: ''
  - name: Newsletter
    description: ''

